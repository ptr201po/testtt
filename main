local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Fuck Nigga Bypasser",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://pastebin.com/raw/mfwCQK0D"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Main", 4483362458) -- Title, Image
local WordsTab = Window:CreateTab("Words", 4483362458) -- Title, Image
local RacismTab = Window:CreateTab("Racism", 4483362458) -- Title, Image
local HomophobicTab = Window:CreateTab("Homophobic", 4483362458) -- Title, Image
local RoleplayTab = Window:CreateTab("Roleplay", 4483362458) -- Title, Image

local WordsSection = WordsTab:CreateSection("Words")
local RacismSection = RacismTab:CreateSection("Games")
local HomophobicSection = HomophobicTab:CreateSection("Homophobic")
local RoleplaySection = RoleplayTab:CreateSection("Roleplay")

local AltParagraph = MainTab:CreateParagraph({Title = "oshrbrwowididb", Content = "u should use an alt dumbass nigga"})

local Divider = MainTab:CreateDivider()

local Dropdown = MainTab:CreateDropdown({
   Name = "Method",
   Options = {"Test1","Test2","Test3"},
   CurrentOption = {"Option 1"},
   MultipleOptions = false,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})

local AutoToggle = MainTab:CreateToggle({
   Name = "Auto Bypass",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Divider2 = MainTab:CreateDivider()

local RapeParagraph = MainTab:CreateParagraph({Title = "Rape", Content = "enter player name and rape"})

local TargetInput = MainTab:CreateInput({
   Name = "Player",
   CurrentValue = "",
   PlaceholderText = "Player Name",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
   -- The function that takes place when the input is changed
   -- The variable (Text) is a string for the value in the text box
   end,
})

local RapeToggle = MainTab:CreateToggle({
   Name = "Rape",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Divider3 = MainTab:CreateDivider()

local JerkParagraph = MainTab:CreateParagraph({Title = "Jerk off", Content = "jerk off or something idk"})

local SpeedInput = MainTab:CreateInput({
   Name = "Speed",
   CurrentValue = "",
   PlaceholderText = "How fast u wanna jerk",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
   -- The function that takes place when the input is changed
   -- The variable (Text) is a string for the value in the text box
   end,
})

local JerkToggle = MainTab:CreateToggle({
   Name = "Jerk",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})
